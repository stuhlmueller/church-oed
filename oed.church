#!r6rs
(import (church church) 
        (church church-eval trace-eval) 
        (church readable-scheme) 
        (oed-utils)
        (rnrs))

(register-primitive-procedure! 'loglogistic loglogistic)
(register-primitive-procedure! 'kl-divergence kl-divergence)
(register-primitive-procedure! 'euclidean-distance euclidean-distance)
(register-primitive-procedure! 'normalized-euclidean-distance normalized-euclidean-distance)
(register-primitive-procedure! 'symmetrized-divergence symmetrized-divergence)
(register-primitive-procedure! 'apply-church-procedure apply-church-procedure)

(define (sort-by-rest l)
  (quicksort l (lambda (x y) (<= (rest x) (rest y)))))

(register-primitive-procedure! 'sort-by-rest sort-by-rest)


(church
  
  (debug-mode 'verbosity 12)
  (debug-mode 'mh-statistics true)
  
  (load "oed-utils.church")
  

  ; ========================================================
  ; main query
  
  (define (sample-informative-stimuli model1 model2 stimulus-sampler)
    (repeated-mh-lex-query stimulus-samples stimulus-lag
      '[(stimulus         (sample-stimulus))
        (model1-responses (opaque-sample-model-responses model1 stimulus model-samples))
        (model2-responses (opaque-sample-model-responses model2 stimulus model-samples))
        (m1-response-dist (empirical-dist model1-responses response-space))
        (m2-response-dist (empirical-dist model2-responses response-space))
        (m1-m2-divergence (normalized-euclidean-distance m1-response-dist m2-response-dist))]
      '(list stimulus m1-m2-divergence)
      '(flip m1-m2-divergence)
      (get-current-environment)))

  (define (sample-informative-stimuli-from-dists model1-dist model2-dist stimulus-sampler)
    (repeated-mh-lex-query stimulus-samples stimulus-lag
      '[(stimulus         (sample-stimulus))
        (m1-response-dist (model1-dist stimulus))
        (m2-response-dist (model2-dist stimulus))
        (m1-m2-divergence (normalized-euclidean-distance m1-response-dist m2-response-dist))]
      '(pair stimulus m1-m2-divergence)
      '(flip m1-m2-divergence)
      (get-current-environment)))


  ; ========================================================
  ; example

  (load "./experiments/exemplar-prototype.experiment")
  
  (define stimulus-samples 100)
  (define stimulus-lag 10)
  
  (define model-samples 1000)
  (define model-lag 2)
  (define model-swaps 3)
  
  ; (define informative-stimuli (sample-informative-stimuli model1 model2 sample-stimulus))
  (define informative-stimuli (sample-informative-stimuli-from-dists model1-dist model2-dist sample-stimulus))
  (define sorted-stimuli (sort-by-rest informative-stimuli))
  (define top-stimulus (first (last sorted-stimuli)))
  (pretty-print sorted-stimuli)
  
  top-stimulus
  'prototype
  (model1-dist top-stimulus)
  'exemplar
  (model2-dist top-stimulus)
  ; (pretty-print (empirical-dist informative-stimuli stimulus-space))

)