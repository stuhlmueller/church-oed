;; ------------------------------------------------------------------
;; Stimuli

(define stimulus-space
  (list 0 1 2 3 4 5 6))

(define (sample-stimulus)
  (uniform-draw stimulus-space))

(define stimulus-1 1)
(define stimulus-2 2)

;; ------------------------------------------------------------------
;; Response Space

(define response-space
  (list true false))


;; ------------------------------------------------------------------
;; Models

(define model1-probs  (list 0.5 0.5 0.5 0.5 0.5 0.6 0.7))

(define (model1-dist x)
  (let ((p (list-ref model1-probs x)))
    (list p (- 1 p))))

(define (model1 x n)
  (repeat n (lambda () (flip (list-ref model1-probs x)))))


(define model2-probs (list 0.6 0.9 0.8 0.7 0.6 0.7 0.8))

(define (model2-dist x)
  (let ((p (list-ref model2-probs x)))
    (list p (- 1 p))))

(define (model2 x n)
  (repeat n (lambda () (flip (list-ref model2-probs x)))))
